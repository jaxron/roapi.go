package types

// ThumbnailType represents the type of thumbnail.
type ThumbnailType string

const (
	AvatarType                     ThumbnailType = "Avatar"
	AvatarHeadShotType             ThumbnailType = "AvatarHeadShot"
	GameIconType                   ThumbnailType = "GameIcon"
	BadgeIconType                  ThumbnailType = "BadgeIcon"
	GameThumbnailType              ThumbnailType = "GameThumbnail"
	GamePassType                   ThumbnailType = "GamePass"
	AssetType                      ThumbnailType = "Asset"
	BundleThumbnailType            ThumbnailType = "BundleThumbnail"
	OutfitType                     ThumbnailType = "Outfit"
	GroupIconType                  ThumbnailType = "GroupIcon"
	DeveloperProductType           ThumbnailType = "DeveloperProduct"
	AutoGeneratedAssetType         ThumbnailType = "AutoGeneratedAsset"
	AvatarBustType                 ThumbnailType = "AvatarBust"
	PlaceIconType                  ThumbnailType = "PlaceIcon"
	AutoGeneratedGameIconType      ThumbnailType = "AutoGeneratedGameIcon"
	ForceAutoGeneratedGameIconType ThumbnailType = "ForceAutoGeneratedGameIcon"
	LookType                       ThumbnailType = "Look"
)

// ThumbnailFormat represents the format of the thumbnail.
type ThumbnailFormat string

const (
	PNG  ThumbnailFormat = "png"
	JPEG ThumbnailFormat = "jpeg"
	WEBP ThumbnailFormat = "webp"
)

// ThumbnailSize represents the size of the thumbnail.
type ThumbnailSize string

const (
	Size30x30   ThumbnailSize = "30x30"
	Size48x48   ThumbnailSize = "48x48"
	Size60x60   ThumbnailSize = "60x60"
	Size75x75   ThumbnailSize = "75x75"
	Size100x100 ThumbnailSize = "100x100"
	Size110x110 ThumbnailSize = "110x110"
	Size140x140 ThumbnailSize = "140x140"
	Size150x150 ThumbnailSize = "150x150"
	Size180x180 ThumbnailSize = "180x180"
	Size250x250 ThumbnailSize = "250x250"
	Size352x352 ThumbnailSize = "352x352"
	Size420x420 ThumbnailSize = "420x420"
	Size720x720 ThumbnailSize = "720x720"
)

// ThumbnailState represents the state of the thumbnail.
type ThumbnailState string

const (
	ThumbnailStateCompleted ThumbnailState = "Completed"
	ThumbnailStatePending   ThumbnailState = "Pending"
	ThumbnailStateBlocked   ThumbnailState = "Blocked"
)

// ThumbnailRequest represents a single thumbnail request.
type ThumbnailRequest struct {
	Type       ThumbnailType   `json:"type"       validate:"required"`       // Type of thumbnail to request
	Size       ThumbnailSize   `json:"size"       validate:"required"`       // Size of the thumbnail
	RequestID  string          `json:"requestId"  validate:"required"`       // Unique identifier for the request
	TargetID   uint64          `json:"targetId"   validate:"required,min=1"` // ID of the target item
	Token      string          `json:"token"      validate:"omitempty"`      // Optional authentication token
	Alias      string          `json:"alias"      validate:"omitempty"`      // Optional alias for the thumbnail
	Format     ThumbnailFormat `json:"format"     validate:"omitempty"`      // Optional format for the thumbnail
	IsCircular bool            `json:"isCircular"`                           // Whether the thumbnail should be circular
}

// ThumbnailData represents the data for a single thumbnail in the response.
type ThumbnailData struct {
	RequestID    string         `json:"requestId"    validate:"required"`                                 // Unique identifier for the request
	ErrorCode    int            `json:"errorCode"`                                                        // Error code (0 if no error)
	ErrorMessage string         `json:"errorMessage" validate:"excluded_if=ErrorCode 0"`                  // Error message (empty if no error)
	TargetID     uint64         `json:"targetId"     validate:"required,min=1"`                           // ID of the target item
	State        ThumbnailState `json:"state"        validate:"required,oneof=Completed Pending Blocked"` // Current state of the thumbnail
	ImageURL     *string        `json:"imageUrl"     validate:"omitempty"`                                // URL of the thumbnail image
	Version      *string        `json:"version"      validate:"omitempty"`                                // Version of the thumbnail
}
